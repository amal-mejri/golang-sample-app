trigger: 
 - master

pool:
   name: 'cgi-ado-agents-small'


jobs:
- job: Build
  displayName: build and test stage
  steps: 
  - task: GoTool@0
    displayName: 'Set GoLang version'
    inputs:
      version: '1.18.2'
  - task: Go@0
    displayName: 'Install Go'
    inputs:
      command: 'get'
      arguments: '-d'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
  - task: Go@0
    displayName: 'Install dependency'
    inputs:
      command: 'mod'
      arguments: 'download'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
  - task: Go@0
    displayName: 'Run Tests'
    inputs:
      command: 'test'
      arguments: '-v'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
  - task: Go@0
    displayName: 'Build App'
    inputs:
      command: 'build'
      arguments: '-o out/go-sample-app'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
  - task: CmdLine@2
    inputs:
      scripts: ls -la
      workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: CopyFiles@2
    inputs:
      TargetFolder: '$(System.DefaultWorkingDirectory)/out'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish pipeline artifact'
    inputs:
      artifactName: 'drop'
      targetPath: '$(Build.ArtifactStagingDirectory)'
 
- deployment: VMDeploy
  displayName: 'deploy vm '
  environment:
    name:  vm
    resourceName: CgiVm
    resourceType: VirtualMachine
    tags: web
  strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: 'drop'
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on success
  

